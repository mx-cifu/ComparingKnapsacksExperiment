package Utilities;

import AlgorithmPackage.*;

import java.util.ArrayList;

public class AlgorithmTester {

    private KnapsackGenMain knapGen;
    private TerminalOutput terminalOutput;
    private CSVOutput csvOutput;
    private ArrayList<Knapsack> knapsacks;
    private AlgorithmParent[] algorithms;
    private ArrayList<TestResult>[] testResults;

    /**
     * This class creates algorithm objects and test result arraylists, and then uses
     * knapsack objects generated by knapsack generator class to perform tests on the
     * algorithms. After doing this, it requests output from the terminal output and
     * csv output objects.
     * @param knapGen knapsack objects to use for testing
     * @param terminalOutput terminal output of results
     * @param csvOutput csv output of results
     */
    public AlgorithmTester(KnapsackGenMain knapGen, TerminalOutput terminalOutput, CSVOutput csvOutput) {
        this.knapGen = knapGen;
        this.terminalOutput = terminalOutput;
        this.csvOutput = csvOutput;

        // set up array of algorithm objects
        algorithms = new AlgorithmParent[5];


        // 01 algorithms
        algorithms[0] = new DynamicKnapSack();
        algorithms[1] = new Greedy01KnapSack();
        algorithms[2] = new BruteForce01Knapsack();

        // fractional algorithms
        algorithms[3] = new DynamicKnapSack(true);
        //algorithms[4] = new FractionalBruteForce();
        algorithms[4] = new FractionalGreedy();

        knapsacks = knapGen.getKnapList();

        // set up array of test result arraylists
        testResults = new ArrayList[5];
        for (int i = 0; i < testResults.length; i++) {
            testResults[i] = new ArrayList<>();
        }
    }

    /**
     * Performs the algorithms on each of the knapsack objects, stores the results in test results,
     * and then outputs the results to both the terminal and csv format.
     */
    public void runAlgorithms() {
        terminalOutput.printIntro();
        for(int j = 0; j < algorithms.length; j++) {
            TestResult primer = algorithms[j].solveKnapsack(knapsacks.get(0));
        }

        // perform tests on each algorithm
        for (Knapsack knapsack : knapsacks) {
            for (int i = 0; i < algorithms.length; i++) {
                TestResult result = algorithms[i].solveKnapsack(knapsack);
                testResults[i].add(result);
                // determine which type of algorithm, and add results to csv output
                if (i < 3) {
                    csvOutput.add01(result);
                } else {
                    csvOutput.addFract(result);
                }
            }
        }

        csvOutput.createFile();

        // output terminal results for 01 algorithms
        terminalOutput.printTitle("01Knapsack Algorithms");
        for (Knapsack knapsack : knapsacks) {
            for (int i = 0; i < knapsacks.size(); i++) {
                terminalOutput.printProblemSet(knapsack, i + 1, 4);
                for (int j = 0; j < 3; j++) {
                    terminalOutput.printTestResults(testResults[j].get(i));
                }
            }
        }

        // output terminal results for fractional algorithms
        terminalOutput.printTitle("Fractional Knapsack Algorithms");
        for (Knapsack knapsack : knapsacks) {
            for (int i = 0; i < knapsacks.size(); i++) {
                terminalOutput.printProblemSet(knapsack, i + 1, 4);
                for (int j = 3; j < 5; j++) {
                    terminalOutput.printTestResults(testResults[j].get(i));
                }
            }
        }
    }
}
